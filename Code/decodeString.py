# 394. 字符串解码
# 给定一个经过编码的字符串，返回它解码后的字符串。
# 编码规则为: k[encoded_string]，表示其中方括号内部的 encoded_string 正好重复 k 次。注意 k 保证为正整数。
# 你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。
# 此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 k ，例如不会出现像 3a 或 2[4] 的输入。

# 示例 1：
# 输入：s = "3[a]2[bc]"
# 输出："aaabcbc"
# 示例 2：
# 输入：s = "3[a2[c]]"
# 输出："accaccacc"
# 示例 3：
# 输入：s = "2[abc]3[cd]ef"
# 输出："abcabccdcdcdef"
# 示例 4：
# 输入：s = "abc3[cd]xyz"
# 输出："abccdcdcdxyz"

# 为了解决字符串解码的问题，我们可以使用栈来处理嵌套的括号结构，从而正确地解码字符串。以下是详细的解决方案：

# ### 方法思路
# 1. **栈的使用**：栈用于保存当前的处理状态，包括当前字符串和重复次数。
# 当遇到左括号时，将当前状态压入栈中；当遇到右括号时，弹出栈顶元素进行处理。
# 2. **数字处理**：遇到数字字符时，累积数字以处理多位数的情况。
# 3. **字符串处理**：遇到字母字符时，直接添加到当前字符串中；遇到右括号时，将当前字符串重复相应次数并合并到之前的字符串中。

### 解决代码
class Solution:
    def decodeString(self, s: str) -> str:
        stack = []
        current_str = ""
        num = 0
        for c in s:
            if c.isdigit():
                num = num * 10 + int(c)
            elif c == '[':
                stack.append((current_str, num))
                current_str = ""
                num = 0
            elif c == ']':
                prev_str, k = stack.pop()
                current_str = prev_str + current_str * k
            else:
                current_str += c
        return current_str

# ### 代码解释
# - **初始化**：使用栈`stack`保存处理状态，`current_str`存储当前处理的字符串，`num`存储当前累积的数字。
# - **遍历字符**：逐个处理字符串中的每个字符：
#   - **数字字符**：累积到`num`中，处理多位数。
#   - **左括号**：将当前字符串和数字压入栈中，并重置`current_str`和`num`。
#   - **右括号**：弹出栈顶元素，将当前字符串重复相应次数后合并到之前的字符串中。
#   - **字母字符**：直接添加到当前字符串中。
# - **返回结果**：最终返回处理完成的字符串`current_str`。

# 该方法通过栈结构有效处理嵌套括号，确保字符串按正确顺序解码，时间复杂度为线性，与输出字符串的长度成正比。
