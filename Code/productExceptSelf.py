# 238. 除自身以外数组的乘积
# 给你一个整数数组 nums，返回 数组 answer ，其中 answer[i] 等于 nums 中除 nums[i] 之外其余各元素的乘积 。
# 题目数据 保证 数组 nums之中任意元素的全部前缀元素和后缀的乘积都在  32 位 整数范围内。
# 请 不要使用除法，且在 O(n) 时间复杂度内完成此题。

# 示例 1:

# 输入: nums = [1,2,3,4]
# 输出: [24,12,8,6]
# 示例 2:

# 输入: nums = [-1,1,0,-3,3]
# 输出: [0,0,9,0,0]

# 为了计算一个整数数组中每个元素除自身外的其他元素的乘积，我们可以使用两次线性遍历的方法，分别计算每个元素左边和右边的乘积，
# 从而在O(n)的时间复杂度内完成，而无需使用除法。

# 方法思路
# 左乘积数组：首先从左到右遍历数组，计算每个元素左边所有元素的乘积，并存储在结果数组中。

# 右乘积累积：然后从右到左遍历数组，使用一个变量动态维护右边的乘积，并将右边乘积与左边乘积相乘，得到最终结果。

# 这种方法避免了使用额外空间（除结果数组外），仅使用常数空间，时间复杂度为O(n)。

from typing import List
class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        n = len(nums)
        answer = [1] * n
        
        # 计算左乘积
        for i in range(1, n):
            answer[i] = answer[i-1] * nums[i-1]
        
        # 计算右乘积并更新结果
        R = 1
        # python中的逆序写法（range(n-1, -1, -1)）
        for i in range(n-1, -1, -1):
            answer[i] *= R
            R *= nums[i]
        
        return answer

# 代码解释
# 初始化结果数组：创建一个长度与输入数组相同的数组answer，初始值全为1。

# 计算左乘积：从左到右遍历数组，每个位置的左乘积等于前一个位置的左乘积乘以前一个元素的值。

# 计算右乘积并更新结果：从右到左遍历数组，使用变量R累积右乘积，每次将当前右乘积与左乘积相乘，得到最终结果，并更新R为当前元素的值乘以前一次的右乘积。

# 这种方法高效地利用两次遍历完成计算，确保了时间复杂度和空间复杂度均为最优。